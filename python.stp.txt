{"metadata":{"guid":"b60771d6-4955-4ccc-87bd-3517600c6a69","url":"/v2/streaming_pipelines/b60771d6-4955-4ccc-87bd-3517600c6a69","created_at":"2019-01-20T09:01:30Z","updated_at":"2019-01-20T11:26:29Z","revision":1547983589160},"entity":{"name":"python model flow3","description":"","project_guid":"f5dd27bb-3d3f-4b85-869e-b1a7f48e4d22","graph":{"doc_type":"pipeline","version":"1.0","json_schema":"http://www.ibm.com/ibm/wdp/flow-v1.0/pipeline-flow-v1-schema.json","id":"","app_data":{"ui_data":{"name":"python model flow3"}},"primary_pipeline":"primary-pipeline","pipelines":[{"id":"primary-pipeline","runtime":"streams","nodes":[{"id":"code_k2p7ohr2ajl","type":"binding","op":"ibm.streams.sources.code","outputs":[{"id":"target","schema_ref":"schema0","links":[{"node_id_ref":"python_model_1ttyhr70fa5","port_id_ref":"source"}]}],"parameters":{"code":"#\n# YOU MUST EDIT THE SCHEMA and add all attributes that you are returning as output.\n#\n# Preinstalled Python packages can be viewed from the Settings pane.\n# In the Settings pane you can also install additional Python packages.\n\nimport sys\nimport time\nimport logging\nfrom sklearn import datasets\nimport six.moves.cPickle as cPickle\nfrom random import randint\n\n# Use this logger for tracing or debugging your code:\nlogger = logging.getLogger(__name__)\n# Example:\n# logger.debug('Got to step 2...')\n\n# init() function will be called once on pipeline initialization\n# @state a Python dictionary object for keeping state. The state object is passed to the produce function\ndef init(state):\n    # do something once on pipeline initialization and save in the state object\n    pass\n\n\n# produce() function will be called when the job starts to run.\n# It is called on a background thread, and it will typically invoke the 'submit()' callback\n# whenever a tuple of data is ready to be emitted from this operator.\n# This allows for using asynchronous data services as well as synchronous data generation or retrieval.\n# @submit a Python callback function that takes one argument: a dictionary representing a single tuple.\n# @state a Python dictionary object for keeping state\n# You must declare all output attributes in the Edit Schema window.\ndef produce(submit, state):\n    digits = datasets.load_digits()\n    samples_count = len(digits.images)  \n    while True:\n        rand_idx = randint(1, samples_count)\n        rand_data = digits.data[rand_idx-1:rand_idx]  \n        data_bytes = cPickle.dumps(rand_data)\n        data_string = data_bytes.hex()\n        submit({\"image\": data_string})\n        time.sleep(0.01)","schema_mapping":[{"name":"image","type":"string","length":0,"source_elem_name":""}]},"app_data":{"ui_data":{"label":"Code","x_pos":20,"y_pos":170}}},{"id":"python_model_1ttyhr70fa5","type":"execution_node","op":"ibm.streams.operations.python-model","outputs":[{"id":"target","schema_ref":"schema1","links":[{"node_id_ref":"debug_71vebq7nnib","port_id_ref":"source"}]}],"parameters":{"model_source":"Watson Machine Learning","service_ref":"2a7906cf-826a-4ccf-8bdc-b14596047d50","model_ref":"be3ba021-1ade-4c4b-b218-4704945392a9","code":"#\n# YOU MUST EDIT THE SCHEMA and add all attributes that you are returning as output.\n#\n# Preinstalled Python packages can be viewed from the Settings pane.\n# In the Settings pane you can also install additional Python packages.\n\nimport sys\nimport logging\nimport six.moves.cPickle as cPickle\nfrom sklearn import datasets\nfrom random import randint\n\n# Use this logger for tracing or debugging your code:\nlogger = logging.getLogger(__name__)\n# Example:\n# logger.debug('Got to step 2...')\n\n# init() function will be called once on pipeline initialization\n# @state a Python dictionary object for keeping state. The state object is passed to the process function\ndef init(state):\n    # do something once on pipeline initialization and save in the state object\n    pass\n\n\n# process() function will be invoked on every event tuple\n# @event a Python dictionary object representing the input event tuple as defined by the input schema\n# @state a Python dictionary object for keeping state over subsequent function calls\n# return must be a Python dictionary object. It will be the output of this operator.\n#        Returning None results in not submitting an output tuple for this invocation.\n# You must declare all output attributes in the Edit Schema window.\ndef process(event, state):\n    image_input = event['image']\n    image_input_bytes = bytes.fromhex(image_input)\n    image = cPickle.loads(image_input_bytes)\n    model = state['model']\n    predictions = model.predict(image)\n    event['prediction'] = predictions(0)\n    return event\n\n# Make sure the Python packages that are used in this streams flow is compatible\n# with the packages used to create the model (Click Settings > Environment).\ndef load_model(state, model):\n\tstate['model'] = model\n\n# Make sure the Python packages' version that is used in this streams flow is compatible\n# with the one used to create the Pickled object (Click Settings > Environment).\n#\n# If you are using a different serialization method, you must modify the code below:\ndef load_myfile(state, path_myfile):\n    with open(path_myfile) as myfile:\n        state['myfile'] = myfile.read().strip()","schema_mapping":[{"name":"prediction","type":"string","length":0,"source_elem_name":""}]},"app_data":{"ui_data":{"label":"hand-written-digits-recognition","x_pos":320,"y_pos":170}}},{"id":"debug_71vebq7nnib","type":"binding","op":"ibm.streams.targets.debug","parameters":{},"app_data":{"ui_data":{"label":"Debug","x_pos":620,"y_pos":170}}}]}],"schemas":[{"id":"schema0","fields":[{"name":"image","type":"string"}]},{"id":"schema1","fields":[{"name":"prediction","type":"string"}]}]},"engines":{"streams":{"instance_id":"f2cfe308-de93-46d9-a3b5-f2c6d354278c"}}}}